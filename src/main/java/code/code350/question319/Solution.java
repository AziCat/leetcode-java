package code.code350.question319;

/**
 * 初始时有 n 个灯泡关闭。 第 1 轮，你打开所有的灯泡。 第 2 轮，每两个灯泡你关闭一次。 第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。第 i 轮，每 i 个灯泡切换一次开关。 对于第 n 轮，你只切换最后一个灯泡的开关。 找出 n 轮后有多少个亮着的灯泡。
 * <p>
 * 示例:
 * <p>
 * 输入: 3
 * 输出: 1
 * 解释:
 * 初始时, 灯泡状态 [关闭, 关闭, 关闭].
 * 第一轮后, 灯泡状态 [开启, 开启, 开启].
 * 第二轮后, 灯泡状态 [开启, 关闭, 开启].
 * 第三轮后, 灯泡状态 [开启, 关闭, 关闭].
 * <p>
 * 你应该返回 1，因为只有一个灯泡还亮着。
 *
 * @author yan
 * @version 1.0
 * @date 2020/3/20
 */
public class Solution {
    /**
     * 规律，一个数n = i*j。除了完全平方数，因数都是成对出现的。
     * i!=j时遇到i时开关转换，遇到j时开关转换，最终结果为0。
     * i=j开关转换次数为奇数，最终结果为1。
     * 1 00 1 0000 1 000000 1  00000000 1  ...
     * 1 xx 4 xxxx 9 xxxxxx 16 xxxxxxxx 25 ...
     *
     * @param n
     * @return
     */
    public int bulbSwitch(int n) {
        if (n == 0) {
            return 0;
        }
        return (int) Math.sqrt(n);
    }
}
